namespace = ultimateorigins_game_start

# init game start events
event = {
	id = ultimateorigins_game_start.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_playable_country = {
			limit = { 
				has_origin = origin_mechhegemon
			}
			country_event = { id = mechhegemon_game_start.1 }
		}
		every_playable_country = {
			limit = { 
				has_origin = origin_genericfed
			}
			country_event = { id = genericfed_game_start.1 }
		}
		every_playable_country = {
			limit = { 
				has_origin = origin_gestalthegemon
			}
			country_event = { id = gestalthegemon_game_start.1 }
		}
	}
}

#init tech
country_event = {
	id = ultimateorigins_game_start.2
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = { 
			limit = {
				has_origin = origin_mechhegemon
			}
			give_technology = { message = no tech = tech_powered_exoskeletons }
			give_technology = { message = no tech = tech_robotic_workers }
		}
	}
}

# init federation lanes
country_event = {
	id = ultimateorigins_game_start.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = default
	}
	immediate = {
		if = {
			limit = { 
			OR={
				has_origin = origin_mechhegemon
				has_origin = origin_genericfed
			}
				capital_scope = {
					solar_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			if = {
				limit = {
					exists = event_target:hyperlane_system
					event_target:hyperlane_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
				event_target:hyperlane_system = {
					random_system = {
						limit = {
							distance = {
								source = prev
								type = euclidean
								min_distance >= 1
								max_distance <= 25
							}
							NOT = { has_hyperlane_to = prev }
							NOT = { exists = owner }
						}
						add_hyperlane = {
							from = this
							to = prev
						}
					}
				}
			}
		}
		every_planet_within_border = {
			limit = {
				has_deposit_for = shipclass_mining_station
				has_planet_flag = starting_mining_target
				has_mining_station = no
			}
			create_mining_station = {
				owner = ROOT
			}
		}
		every_planet_within_border = {
			limit = {
				has_deposit_for = shipclass_research_station
				has_planet_flag = starting_research_target
				has_research_station = no
			}
			create_research_station = {
				owner = ROOT
			}
		}
		if = {
			limit = {
				has_civic = civic_reanimated_armies
			}
			add_research_option = tech_centralized_command
		}
	}
}

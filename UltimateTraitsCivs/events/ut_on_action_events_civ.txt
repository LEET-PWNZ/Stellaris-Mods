namespace = ut_events_civ

# trigger vassal init on game start
event = {
	id = ut_events_civ.1
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_playable_country = {
			limit = { 
				has_civic = civic_feudal_diplomat
			}
			country_event = { id = ut_events_civ.2 }
		}
	}
}

#init vassal
country_event = {
	id = ut_events_civ.2
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_country_flag = first_contact_event
		set_country_flag = Story2 # Already encountered spacefarers
		# add_tradition = tr_diplomacy_adopt
		# add_tradition = tr_diplomacy_the_federation

		if = {
			limit = { num_guaranteed_colonies >= 2 }
			capital_scope = {
				solar_system = {
					closest_system = {
						limit = { has_star_flag = neighbor_t1_first_colony }
						random_system_planet = {
							limit = { has_planet_flag = prescripted_ideal }
							save_event_target_as = feudaldiplo_planet_1
							ut_sub_planet_setup = yes
						}
					}
					closest_system = {
						limit = { has_star_flag = neighbor_t2_second_colony }
						random_system_planet = {
							limit = { has_planet_flag = prescripted_ideal }
							save_event_target_as = feudaldiplo_planet_2
							ut_sub_planet_setup = yes
						}
					}
				}
			}
		}
		if = {
			limit = { num_guaranteed_colonies >= 1 }
			capital_scope = {
				solar_system = {
					closest_system = {
						limit = { has_star_flag = neighbor_t1_first_colony }
						random_system_planet = {
							limit = { has_planet_flag = prescripted_ideal }
							save_event_target_as = feudaldiplo_planet_1
							ut_sub_planet_setup = yes
						}
					}
					closest_system = {
						limit = {
							NOT = { has_star_flag = neighbor_t1_first_colony }
							has_owner = no
							any_system_planet = {
								is_ringworld = no
								is_asteroid = no
								is_star = no
								is_moon = no
							}
						}
						if = {
							limit = {
								any_system_planet = { habitable_planet = yes }
							}
							random_system_planet = {
								limit = { habitable_planet = yes }
								save_event_target_as = feudaldiplo_planet_2
								set_planet_size = 16
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_ringworld = no
									is_asteroid = no
									is_star = no
									is_moon = no
								}
								save_event_target_as = feudaldiplo_planet_2
								ut_sub_planet_setup = yes
							}
						}
					}
				}
			}
		}
		if = {
			limit = { num_guaranteed_colonies = 0 }
			capital_scope = {
				solar_system = {
					closest_system = {
						limit = { has_owner = no }
						set_star_flag = feudaldiplo_origin_system_1
						if = {
							limit = {
								any_system_planet = { habitable_planet = yes }
							}
							random_system_planet = {
								limit = { habitable_planet = yes }
								save_event_target_as = feudaldiplo_planet_1
								set_planet_size = 16
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_ringworld = no
									is_asteroid = no
									is_star = no
									is_moon = no
								}
								save_event_target_as = feudaldiplo_planet_1
								ut_sub_planet_setup = yes
							}
						}
					}
					closest_system = {
						limit = {
							NOT = { has_star_flag = feudaldiplo_origin_system_1 }
							has_owner = no
							any_system_planet = {
								is_ringworld = no
								is_asteroid = no
								is_star = no
								is_moon = no
							}
						}
						if = {
							limit = {
								any_system_planet = { habitable_planet = yes }
							}
							random_system_planet = {
								limit = { habitable_planet = yes }
								save_event_target_as = feudaldiplo_planet_2
								set_planet_size = 16
							}
						}
						else = {
							random_system_planet = {
								limit = {
									is_ringworld = no
									is_asteroid = no
									is_star = no
									is_moon = no
								}
								save_event_target_as = feudaldiplo_planet_2
								ut_sub_planet_setup = yes
							}
						}
					}
				}
			}
		}

		event_target:feudaldiplo_planet_1 = {
			
			solar_system = { generate_home_system_resources = yes }
			if={
				limit={
					root={
						has_civic = civic_feudal_diplomat
					}
				}
				create_feudaldiplo_org_spec = yes
				create_feudaldiplo_org_member = yes
				create_feudaldiplo_org_starbase = yes
			}
			
			
		}

		event_target:feudaldiplo_planet_2={
			solar_system = { generate_home_system_resources = yes }
		}

		event_target:feudaldiplo_member_1 = {
			create_starting_leaders = yes
			country_event = { id = game_start.9 }
			country_event = { id = ut_events_civ.3 days = 1 } 
			set_subject_of = {
				who = root
				subject_type = vassal
			}
			
			# join_alliance = { who = root override_requirements = yes }
		}

		if = {
			limit = { 
				has_civic = civic_feudal_diplomat
			}
			# federation = {
			# 	set_federation_type = hegemony_federation
			# 	set_name = random
			# 	set_federation_law = succession_term_years_20
			# }
			event_target:feudaldiplo_member_1 = {
				add_trust = {
					amount = 40
					who = root
				}
			}
			add_intel = {
				amount = 40
				who = event_target:feudaldiplo_member_1
			}
		}
		# set_federation_leader = root
	}
}


# init lanes
country_event = {
	id = ut_events_civ.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = default
	}
	immediate = {
		if = {
			limit = { 
				has_civic = civic_feudal_diplomat
				capital_scope = {
					solar_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			if = {
				limit = {
					exists = event_target:hyperlane_system
					event_target:hyperlane_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
				event_target:hyperlane_system = {
					random_system = {
						limit = {
							distance = {
								source = prev
								type = euclidean
								min_distance >= 1
								max_distance <= 25
							}
							NOT = { has_hyperlane_to = prev }
							NOT = { exists = owner }
						}
						add_hyperlane = {
							from = this
							to = prev
						}
					}
				}
			}
		}
		every_planet_within_border = {
			limit = {
				has_deposit_for = shipclass_mining_station
				has_planet_flag = starting_mining_target
				has_mining_station = no
			}
			create_mining_station = {
				owner = ROOT
			}
		}
		every_planet_within_border = {
			limit = {
				has_deposit_for = shipclass_research_station
				has_planet_flag = starting_research_target
				has_research_station = no
			}
			create_research_station = {
				owner = ROOT
			}
		}
		if = {
			limit = {
				has_civic = civic_reanimated_armies
			}
			add_research_option = tech_centralized_command
		}
	}
}
